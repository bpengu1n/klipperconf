[gcode_macro START_PRINT]
gcode:
    SET_LED LED="frame_neopixels" RED=1 GREEN=0.1 BLUE=0.1 SYNC=0 TRANSMIT=1
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_PRE_TEMP = params.EXTRUDER_PRE_TEMP|default(150)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set ADAPTIVE = params.ADAPTIVE|default(1)|int %}
    {% set LEVEL_PROFILE = params.LEVEL_PROFILE|default("default")|string %}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    #SET_GCODE_OFFSET Z=0
    # Pre-heat the nozzle to the pre-temp (default 150) to soften any filament
    #  still on the tip and keep probes accurate.
    M109 S{EXTRUDER_PRE_TEMP}
    
    SET_DOCKABLE_PROBE AUTO_ATTACH_DETACH=0
    G28 X
    G28 Y
    ATTACH_PROBE
    
    # Home the printer
    G28 Z

    # If you are using Z-Tilt:
    Z_TILT_ADJUST

    # Start bed heating (but don't wait for it)
    M140 S{BED_TEMP}

    # If you are generating a new bed mesh:
    {% if ADAPTIVE == 1 %}
    BED_MESH_CALIBRATE ADAPTIVE=1
    {% else %}
    {% if LEVEL_PROFILE not in printer.bed_mesh.profiles %}
    BED_MESH_CALIBRATE PROFILE={LEVEL_PROFILE}
    {% else %}
    BED_MESH_PROFILE LOAD={LEVEL_PROFILE}
    {% endif %}
    {% endif %}
    ## NOTE:    The adaptive meshing feature requires exclude_object     ##
    ##      and may require 'Label Objects' to be enabled in the slicer  ##
    ##           To mesh without it just use BED_MESH_CALIBRATE          ##

    DETACH_PROBE
    SET_DOCKABLE_PROBE AUTO_ATTACH_DETACH=1
    
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z2 F300
    led_heater
    #NEOPIXEL_DISPLAY LED="frame_neopixels" TYPE=extruder_temp MODE=glow
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    LED_WHITE
    SET_FILAMENT_SENSOR SENSOR=btt_filament_runout ENABLE=1                          ; enable filament sensor
    SET_FILAMENT_SENSOR SENSOR=btt_filament_motion ENABLE=1                          ; enable filament sensor
    VORON_PURGE


[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z20 F3000
    G90
    G0 Y200 F3000
    # Disable steppers
    M84

[gcode_macro PRINT_START]
gcode:
    START_PRINT {rawparams}

[gcode_macro PRINT_END]
gcode:
    END_PRINT {rawparams}

[gcode_macro BRUSH_NOZZLE]
# heat nozzle for best results
variable_x1: 175 # left of brush   <<<edit this value>>>
variable_x2: 225 # right or brush  <<<edit this value>>>
variable_y1: -10.5 # y value         <<<edit this value>>>
variable_z1: 1.5 # nozzle height   <<<edit this value>>>
gcode:
    M400  ;wait for buffer to clear
    M109 S150
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28         ;home axes before travel moves
    {% endif %}
    M109 S210
    G90
    G0 Z5 F3600     ;ensure nozzle is above endstop pin
    G0 X{x1} Y{y1}  ;left position
    G0 Z{z1}        ;move down, ready for brushing
    M104 S0
    M117 Brushing Nozzle
    G0 X{x2} F5000  ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    #G0 X{x1}        ;move left
    G0 Z5 F3600     ;raise nozzle when done
    M117 Nozzle Cleaned


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=btt_filament_runout ENABLE=0                                  ; disable filament sensor
        SET_FILAMENT_SENSOR SENSOR=btt_filament_motion ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        led_linear_fade
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}
    
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=btt_filament_runout ENABLE=1                          ; enable filament sensor
        SET_FILAMENT_SENSOR SENSOR=btt_filament_motion ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        LED_WHITE
        BASE_RESUME                                                                  ; resume print
    {% endif %}
    
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    led_lighting
    BASE_CANCEL_PRINT

## Filament load/unload macros
[gcode_macro LOAD_FILAMENT]
variable_load_distance: 60         # Distance to load filament into the extruder
variable_purge_distance: 40        # Distance to purge filament after loading
variable_nozzle_preheat_temp: 210  # Default preheat temperature for the nozzle
variable_turn_off_extruder: True   # Option to turn off the extruder after loading (True/False)
gcode:
    # Parameters and settings
    {% set load_speed = params.LOAD_SPEED|default(600) %}  # Speed in mm/min for fast filament loading
    {% set purge_speed = params.PURGE_SPEED|default(300) %}  # Speed in mm/min for purging filament
    {% set target_temp = params.TARGET_TEMP|default(nozzle_preheat_temp) %}  # Target temperature for the nozzle
    {% set min_temp = params.MIN_TEMP|default(180) %}  # Minimum safe temperature for extrusion

    # Save current state of the printer
    SAVE_GCODE_STATE NAME=load_state

    # Heat directly to the target temperature if it's above the minimum temperature
    {% if target_temp >= min_temp %}
        M104 S{target_temp} ; Set extruder to target temperature
        M109 S{target_temp} ; Wait for extruder to reach target temperature
    {% else %}
        # Heat to minimum temperature first if target is too low
        M104 S{min_temp} ; Set extruder to safe minimum temperature
        M109 S{min_temp} ; Wait for extruder to reach safe minimum temperature
    {% endif %}

    # Begin filament loading process
    G91 ; Set relative positioning for extrusion
    G92 E0 ; Reset extruder position
    G1 E{load_distance} F{load_speed} ; Load filament at the specified loading speed
    G1 E{purge_distance} F{purge_speed} ; Purge filament at the slower purging speed

    # Optionally turn off the extruder heater after loading
    {% if turn_off_extruder %}
        M104 S0 ; Turn off extruder heater
    {% endif %}

    # Restore previous state of the printer
    G90 ; Restore absolute positioning
    RESTORE_GCODE_STATE NAME=load_state

    # Completion message
    M117 Filament load complete

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance: 60      # Distance to retract filament from the extruder
variable_nozzle_preheat_temp: 210  # Default preheat temperature for unloading
variable_turn_off_extruder: True   # Option to turn off the extruder after unloading (True/False)
gcode:
    # Parameters and settings
    {% set retract_speed = params.RETRACT_SPEED|default(600) %}  # Speed for retracting filament
    {% set target_temp = params.TARGET_TEMP|default(nozzle_preheat_temp) %}  # Target temperature for the nozzle
    {% set min_temp = params.MIN_TEMP|default(180) %}  # Minimum safe temperature for extrusion

    # Save current state of the printer
    SAVE_GCODE_STATE NAME=unload_state

    # Heat the nozzle to the target temperature if required
    {% if printer.extruder.temperature < target_temp %}
        # Ensure the nozzle is heated to the target temperature or at least the minimum safe temperature
        {% if target_temp >= min_temp %}
            M104 S{target_temp} ; Set extruder to target temperature
            M109 S{target_temp} ; Wait for extruder to reach target temperature
        {% else %}
            M104 S{min_temp} ; Set extruder to safe minimum temperature
            M109 S{min_temp} ; Wait for extruder to reach safe minimum temperature
        {% endif %}
    {% endif %}

    # Begin filament unloading process
    G91 ; Set relative positioning for extrusion
    G92 E0 ; Reset extruder position
    G1 E-{unload_distance} F{retract_speed} ; Retract filament at the specified speed

    # Optionally turn off the extruder heater after unloading
    {% if turn_off_extruder %}
        M104 S0 ; Turn off extruder heater
    {% endif %}

    # Restore previous state of the printer
    G90 ; Restore absolute positioning
    RESTORE_GCODE_STATE NAME=unload_state

    # Completion message

## UNSAFE_MOVE_TOOL
## Move the toolhead without homing
########## Parameters ##########
## X: The X distance to move by (default: 0) mm
## Y: The Y distance to move by (default: 0) mm
## Z: The Z distance to move by (default: 0) mm
## F: The feedrate to use (default: 10) mm/s
[gcode_macro UNSAFE_MOVE_TOOL]
description: Move the toolhead without homing
gcode:
    {% set z = params.Z|default(0)|float %}
    {% set x = params.X|default(0)|float %}
    {% set y = params.Y|default(0)|float %}
    {% set f = params.F|default(10)|float %}
    G90
    SET_KINEMATIC_POSITION Z={(printer.toolhead.axis_maximum.z/2)} X={(printer.toolhead.axis_maximum.x/2)} Y={(printer.toolhead.axis_maximum.y/2)}
    G0 X{(printer.toolhead.axis_maximum.x/2)+x} Y{(printer.toolhead.axis_maximum.y/2)+y} Z{(printer.toolhead.axis_maximum.z/2)+z} F{ (f*60) }
    M84